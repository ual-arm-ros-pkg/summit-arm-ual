/* Auto-generated by genmsg_cpp for file /opt/ros/fuerte/stacks/robotnik_components/robotnik_msgs/srv/get_mode.srv */
#ifndef ROBOTNIK_MSGS_SERVICE_GET_MODE_H
#define ROBOTNIK_MSGS_SERVICE_GET_MODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robotnik_msgs
{
template <class ContainerAllocator>
struct get_modeRequest_ {
  typedef get_modeRequest_<ContainerAllocator> Type;

  get_modeRequest_()
  {
  }

  get_modeRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::robotnik_msgs::get_modeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::get_modeRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct get_modeRequest
typedef  ::robotnik_msgs::get_modeRequest_<std::allocator<void> > get_modeRequest;

typedef boost::shared_ptr< ::robotnik_msgs::get_modeRequest> get_modeRequestPtr;
typedef boost::shared_ptr< ::robotnik_msgs::get_modeRequest const> get_modeRequestConstPtr;


template <class ContainerAllocator>
struct get_modeResponse_ {
  typedef get_modeResponse_<ContainerAllocator> Type;

  get_modeResponse_()
  : mode(0)
  {
  }

  get_modeResponse_(const ContainerAllocator& _alloc)
  : mode(0)
  {
  }

  typedef int8_t _mode_type;
  int8_t mode;


  typedef boost::shared_ptr< ::robotnik_msgs::get_modeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::get_modeResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct get_modeResponse
typedef  ::robotnik_msgs::get_modeResponse_<std::allocator<void> > get_modeResponse;

typedef boost::shared_ptr< ::robotnik_msgs::get_modeResponse> get_modeResponsePtr;
typedef boost::shared_ptr< ::robotnik_msgs::get_modeResponse const> get_modeResponseConstPtr;

struct get_mode
{

typedef get_modeRequest Request;
typedef get_modeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct get_mode
} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::get_modeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::get_modeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::get_modeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::robotnik_msgs::get_modeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::get_modeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/get_modeRequest";
  }

  static const char* value(const  ::robotnik_msgs::get_modeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::get_modeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::robotnik_msgs::get_modeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotnik_msgs::get_modeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::get_modeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::get_modeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::get_modeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "418c02483a8ca57215fb7b31c5c87234";
  }

  static const char* value(const  ::robotnik_msgs::get_modeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x418c02483a8ca572ULL;
  static const uint64_t static_value2 = 0x15fb7b31c5c87234ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::get_modeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/get_modeResponse";
  }

  static const char* value(const  ::robotnik_msgs::get_modeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::get_modeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 mode\n\
\n\
\n\
";
  }

  static const char* value(const  ::robotnik_msgs::get_modeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotnik_msgs::get_modeResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::get_modeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct get_modeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::get_modeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct get_modeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robotnik_msgs::get_mode> {
  static const char* value() 
  {
    return "418c02483a8ca57215fb7b31c5c87234";
  }

  static const char* value(const robotnik_msgs::get_mode&) { return value(); } 
};

template<>
struct DataType<robotnik_msgs::get_mode> {
  static const char* value() 
  {
    return "robotnik_msgs/get_mode";
  }

  static const char* value(const robotnik_msgs::get_mode&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotnik_msgs::get_modeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "418c02483a8ca57215fb7b31c5c87234";
  }

  static const char* value(const robotnik_msgs::get_modeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotnik_msgs::get_modeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/get_mode";
  }

  static const char* value(const robotnik_msgs::get_modeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotnik_msgs::get_modeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "418c02483a8ca57215fb7b31c5c87234";
  }

  static const char* value(const robotnik_msgs::get_modeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotnik_msgs::get_modeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/get_mode";
  }

  static const char* value(const robotnik_msgs::get_modeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOTNIK_MSGS_SERVICE_GET_MODE_H

