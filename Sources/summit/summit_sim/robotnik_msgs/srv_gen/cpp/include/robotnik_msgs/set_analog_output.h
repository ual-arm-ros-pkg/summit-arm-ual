/* Auto-generated by genmsg_cpp for file /opt/ros/fuerte/stacks/robotnik_components/robotnik_msgs/srv/set_analog_output.srv */
#ifndef ROBOTNIK_MSGS_SERVICE_SET_ANALOG_OUTPUT_H
#define ROBOTNIK_MSGS_SERVICE_SET_ANALOG_OUTPUT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robotnik_msgs
{
template <class ContainerAllocator>
struct set_analog_outputRequest_ {
  typedef set_analog_outputRequest_<ContainerAllocator> Type;

  set_analog_outputRequest_()
  : output(0)
  , value(0.0)
  {
  }

  set_analog_outputRequest_(const ContainerAllocator& _alloc)
  : output(0)
  , value(0.0)
  {
  }

  typedef int8_t _output_type;
  int8_t output;

  typedef float _value_type;
  float value;


  typedef boost::shared_ptr< ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_analog_outputRequest
typedef  ::robotnik_msgs::set_analog_outputRequest_<std::allocator<void> > set_analog_outputRequest;

typedef boost::shared_ptr< ::robotnik_msgs::set_analog_outputRequest> set_analog_outputRequestPtr;
typedef boost::shared_ptr< ::robotnik_msgs::set_analog_outputRequest const> set_analog_outputRequestConstPtr;


template <class ContainerAllocator>
struct set_analog_outputResponse_ {
  typedef set_analog_outputResponse_<ContainerAllocator> Type;

  set_analog_outputResponse_()
  : ret(false)
  {
  }

  set_analog_outputResponse_(const ContainerAllocator& _alloc)
  : ret(false)
  {
  }

  typedef uint8_t _ret_type;
  uint8_t ret;


  typedef boost::shared_ptr< ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_analog_outputResponse
typedef  ::robotnik_msgs::set_analog_outputResponse_<std::allocator<void> > set_analog_outputResponse;

typedef boost::shared_ptr< ::robotnik_msgs::set_analog_outputResponse> set_analog_outputResponsePtr;
typedef boost::shared_ptr< ::robotnik_msgs::set_analog_outputResponse const> set_analog_outputResponseConstPtr;

struct set_analog_output
{

typedef set_analog_outputRequest Request;
typedef set_analog_outputResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct set_analog_output
} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "23963a89f1eb75051be813e2ad92b196";
  }

  static const char* value(const  ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x23963a89f1eb7505ULL;
  static const uint64_t static_value2 = 0x1be813e2ad92b196ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_analog_outputRequest";
  }

  static const char* value(const  ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 output\n\
float32 value\n\
\n\
";
  }

  static const char* value(const  ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2cc9e9d8c464550830df49c160979ad";
  }

  static const char* value(const  ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe2cc9e9d8c464550ULL;
  static const uint64_t static_value2 = 0x830df49c160979adULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_analog_outputResponse";
  }

  static const char* value(const  ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ret\n\
\n\
\n\
";
  }

  static const char* value(const  ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.output);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_analog_outputRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ret);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_analog_outputResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robotnik_msgs::set_analog_output> {
  static const char* value() 
  {
    return "1f857604e9e8f27790b5ef70d33fca08";
  }

  static const char* value(const robotnik_msgs::set_analog_output&) { return value(); } 
};

template<>
struct DataType<robotnik_msgs::set_analog_output> {
  static const char* value() 
  {
    return "robotnik_msgs/set_analog_output";
  }

  static const char* value(const robotnik_msgs::set_analog_output&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1f857604e9e8f27790b5ef70d33fca08";
  }

  static const char* value(const robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_analog_output";
  }

  static const char* value(const robotnik_msgs::set_analog_outputRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1f857604e9e8f27790b5ef70d33fca08";
  }

  static const char* value(const robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_analog_output";
  }

  static const char* value(const robotnik_msgs::set_analog_outputResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOTNIK_MSGS_SERVICE_SET_ANALOG_OUTPUT_H

