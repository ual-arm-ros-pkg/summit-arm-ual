/* Auto-generated by genmsg_cpp for file /opt/ros/fuerte/stacks/robotnik_components/robotnik_msgs/srv/set_ptz.srv */
#ifndef ROBOTNIK_MSGS_SERVICE_SET_PTZ_H
#define ROBOTNIK_MSGS_SERVICE_SET_PTZ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robotnik_msgs
{
template <class ContainerAllocator>
struct set_ptzRequest_ {
  typedef set_ptzRequest_<ContainerAllocator> Type;

  set_ptzRequest_()
  : pan(0.0)
  , tilt(0.0)
  , zoom(0.0)
  , relative(false)
  {
  }

  set_ptzRequest_(const ContainerAllocator& _alloc)
  : pan(0.0)
  , tilt(0.0)
  , zoom(0.0)
  , relative(false)
  {
  }

  typedef float _pan_type;
  float pan;

  typedef float _tilt_type;
  float tilt;

  typedef float _zoom_type;
  float zoom;

  typedef uint8_t _relative_type;
  uint8_t relative;


  typedef boost::shared_ptr< ::robotnik_msgs::set_ptzRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::set_ptzRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_ptzRequest
typedef  ::robotnik_msgs::set_ptzRequest_<std::allocator<void> > set_ptzRequest;

typedef boost::shared_ptr< ::robotnik_msgs::set_ptzRequest> set_ptzRequestPtr;
typedef boost::shared_ptr< ::robotnik_msgs::set_ptzRequest const> set_ptzRequestConstPtr;


template <class ContainerAllocator>
struct set_ptzResponse_ {
  typedef set_ptzResponse_<ContainerAllocator> Type;

  set_ptzResponse_()
  : ret(false)
  {
  }

  set_ptzResponse_(const ContainerAllocator& _alloc)
  : ret(false)
  {
  }

  typedef uint8_t _ret_type;
  uint8_t ret;


  typedef boost::shared_ptr< ::robotnik_msgs::set_ptzResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::set_ptzResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_ptzResponse
typedef  ::robotnik_msgs::set_ptzResponse_<std::allocator<void> > set_ptzResponse;

typedef boost::shared_ptr< ::robotnik_msgs::set_ptzResponse> set_ptzResponsePtr;
typedef boost::shared_ptr< ::robotnik_msgs::set_ptzResponse const> set_ptzResponseConstPtr;

struct set_ptz
{

typedef set_ptzRequest Request;
typedef set_ptzResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct set_ptz
} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_ptzRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_ptzRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::set_ptzRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "84c4d3942670b5782592e834a63c50ba";
  }

  static const char* value(const  ::robotnik_msgs::set_ptzRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x84c4d3942670b578ULL;
  static const uint64_t static_value2 = 0x2592e834a63c50baULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::set_ptzRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_ptzRequest";
  }

  static const char* value(const  ::robotnik_msgs::set_ptzRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::set_ptzRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float32 pan\n\
\n\
float32 tilt\n\
\n\
float32 zoom\n\
\n\
bool relative\n\
\n\
";
  }

  static const char* value(const  ::robotnik_msgs::set_ptzRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotnik_msgs::set_ptzRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_ptzResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_ptzResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::set_ptzResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2cc9e9d8c464550830df49c160979ad";
  }

  static const char* value(const  ::robotnik_msgs::set_ptzResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe2cc9e9d8c464550ULL;
  static const uint64_t static_value2 = 0x830df49c160979adULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::set_ptzResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_ptzResponse";
  }

  static const char* value(const  ::robotnik_msgs::set_ptzResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::set_ptzResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ret\n\
\n\
\n\
";
  }

  static const char* value(const  ::robotnik_msgs::set_ptzResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotnik_msgs::set_ptzResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::set_ptzRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pan);
    stream.next(m.tilt);
    stream.next(m.zoom);
    stream.next(m.relative);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_ptzRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::set_ptzResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ret);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_ptzResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robotnik_msgs::set_ptz> {
  static const char* value() 
  {
    return "b0b0a0b023ba1e7f5ff6a9d48ee0689b";
  }

  static const char* value(const robotnik_msgs::set_ptz&) { return value(); } 
};

template<>
struct DataType<robotnik_msgs::set_ptz> {
  static const char* value() 
  {
    return "robotnik_msgs/set_ptz";
  }

  static const char* value(const robotnik_msgs::set_ptz&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotnik_msgs::set_ptzRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b0b0a0b023ba1e7f5ff6a9d48ee0689b";
  }

  static const char* value(const robotnik_msgs::set_ptzRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotnik_msgs::set_ptzRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_ptz";
  }

  static const char* value(const robotnik_msgs::set_ptzRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotnik_msgs::set_ptzResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b0b0a0b023ba1e7f5ff6a9d48ee0689b";
  }

  static const char* value(const robotnik_msgs::set_ptzResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotnik_msgs::set_ptzResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_ptz";
  }

  static const char* value(const robotnik_msgs::set_ptzResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOTNIK_MSGS_SERVICE_SET_PTZ_H

