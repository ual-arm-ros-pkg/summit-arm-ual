/* Auto-generated by genmsg_cpp for file /opt/ros/fuerte/stacks/robotnik_components/robotnik_msgs/srv/set_odometry.srv */
#ifndef ROBOTNIK_MSGS_SERVICE_SET_ODOMETRY_H
#define ROBOTNIK_MSGS_SERVICE_SET_ODOMETRY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robotnik_msgs
{
template <class ContainerAllocator>
struct set_odometryRequest_ {
  typedef set_odometryRequest_<ContainerAllocator> Type;

  set_odometryRequest_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , orientation(0.0)
  {
  }

  set_odometryRequest_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , orientation(0.0)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _z_type;
  float z;

  typedef float _orientation_type;
  float orientation;


  typedef boost::shared_ptr< ::robotnik_msgs::set_odometryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::set_odometryRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_odometryRequest
typedef  ::robotnik_msgs::set_odometryRequest_<std::allocator<void> > set_odometryRequest;

typedef boost::shared_ptr< ::robotnik_msgs::set_odometryRequest> set_odometryRequestPtr;
typedef boost::shared_ptr< ::robotnik_msgs::set_odometryRequest const> set_odometryRequestConstPtr;


template <class ContainerAllocator>
struct set_odometryResponse_ {
  typedef set_odometryResponse_<ContainerAllocator> Type;

  set_odometryResponse_()
  : ret(false)
  {
  }

  set_odometryResponse_(const ContainerAllocator& _alloc)
  : ret(false)
  {
  }

  typedef uint8_t _ret_type;
  uint8_t ret;


  typedef boost::shared_ptr< ::robotnik_msgs::set_odometryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::set_odometryResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_odometryResponse
typedef  ::robotnik_msgs::set_odometryResponse_<std::allocator<void> > set_odometryResponse;

typedef boost::shared_ptr< ::robotnik_msgs::set_odometryResponse> set_odometryResponsePtr;
typedef boost::shared_ptr< ::robotnik_msgs::set_odometryResponse const> set_odometryResponseConstPtr;

struct set_odometry
{

typedef set_odometryRequest Request;
typedef set_odometryResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct set_odometry
} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_odometryRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_odometryRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::set_odometryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b9cc91561ab081df3c838809b2058a1b";
  }

  static const char* value(const  ::robotnik_msgs::set_odometryRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb9cc91561ab081dfULL;
  static const uint64_t static_value2 = 0x3c838809b2058a1bULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::set_odometryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_odometryRequest";
  }

  static const char* value(const  ::robotnik_msgs::set_odometryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::set_odometryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float32 x\n\
\n\
float32 y\n\
\n\
float32 z\n\
\n\
float32 orientation\n\
\n\
";
  }

  static const char* value(const  ::robotnik_msgs::set_odometryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotnik_msgs::set_odometryRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_odometryResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::set_odometryResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::set_odometryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2cc9e9d8c464550830df49c160979ad";
  }

  static const char* value(const  ::robotnik_msgs::set_odometryResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe2cc9e9d8c464550ULL;
  static const uint64_t static_value2 = 0x830df49c160979adULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::set_odometryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_odometryResponse";
  }

  static const char* value(const  ::robotnik_msgs::set_odometryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::set_odometryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ret\n\
\n\
\n\
";
  }

  static const char* value(const  ::robotnik_msgs::set_odometryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotnik_msgs::set_odometryResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::set_odometryRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.orientation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_odometryRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::set_odometryResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ret);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_odometryResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robotnik_msgs::set_odometry> {
  static const char* value() 
  {
    return "34ddd7aa1617c391983fb2ede12712ee";
  }

  static const char* value(const robotnik_msgs::set_odometry&) { return value(); } 
};

template<>
struct DataType<robotnik_msgs::set_odometry> {
  static const char* value() 
  {
    return "robotnik_msgs/set_odometry";
  }

  static const char* value(const robotnik_msgs::set_odometry&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotnik_msgs::set_odometryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "34ddd7aa1617c391983fb2ede12712ee";
  }

  static const char* value(const robotnik_msgs::set_odometryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotnik_msgs::set_odometryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_odometry";
  }

  static const char* value(const robotnik_msgs::set_odometryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotnik_msgs::set_odometryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "34ddd7aa1617c391983fb2ede12712ee";
  }

  static const char* value(const robotnik_msgs::set_odometryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotnik_msgs::set_odometryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/set_odometry";
  }

  static const char* value(const robotnik_msgs::set_odometryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOTNIK_MSGS_SERVICE_SET_ODOMETRY_H

