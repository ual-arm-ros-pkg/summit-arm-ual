/* Auto-generated by genmsg_cpp for file /opt/ros/fuerte/stacks/robotnik_components/robotnik_msgs/msg/ptz.msg */
#ifndef ROBOTNIK_MSGS_MESSAGE_PTZ_H
#define ROBOTNIK_MSGS_MESSAGE_PTZ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct ptz_ {
  typedef ptz_<ContainerAllocator> Type;

  ptz_()
  : pan(0.0)
  , tilt(0.0)
  , zoom(0.0)
  , relative(false)
  {
  }

  ptz_(const ContainerAllocator& _alloc)
  : pan(0.0)
  , tilt(0.0)
  , zoom(0.0)
  , relative(false)
  {
  }

  typedef float _pan_type;
  float pan;

  typedef float _tilt_type;
  float tilt;

  typedef float _zoom_type;
  float zoom;

  typedef uint8_t _relative_type;
  uint8_t relative;


  typedef boost::shared_ptr< ::robotnik_msgs::ptz_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::ptz_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ptz
typedef  ::robotnik_msgs::ptz_<std::allocator<void> > ptz;

typedef boost::shared_ptr< ::robotnik_msgs::ptz> ptzPtr;
typedef boost::shared_ptr< ::robotnik_msgs::ptz const> ptzConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robotnik_msgs::ptz_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robotnik_msgs::ptz_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::ptz_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotnik_msgs::ptz_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::ptz_<ContainerAllocator> > {
  static const char* value() 
  {
    return "84c4d3942670b5782592e834a63c50ba";
  }

  static const char* value(const  ::robotnik_msgs::ptz_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x84c4d3942670b578ULL;
  static const uint64_t static_value2 = 0x2592e834a63c50baULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::ptz_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotnik_msgs/ptz";
  }

  static const char* value(const  ::robotnik_msgs::ptz_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::ptz_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# PAN value\n\
float32 pan\n\
# Tilt value\n\
float32 tilt\n\
# Zoom value\n\
float32 zoom\n\
# Flag for relative  movements\n\
bool relative\n\
\n\
\n\
";
  }

  static const char* value(const  ::robotnik_msgs::ptz_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotnik_msgs::ptz_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::ptz_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pan);
    stream.next(m.tilt);
    stream.next(m.zoom);
    stream.next(m.relative);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ptz_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::ptz_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robotnik_msgs::ptz_<ContainerAllocator> & v) 
  {
    s << indent << "pan: ";
    Printer<float>::stream(s, indent + "  ", v.pan);
    s << indent << "tilt: ";
    Printer<float>::stream(s, indent + "  ", v.tilt);
    s << indent << "zoom: ";
    Printer<float>::stream(s, indent + "  ", v.zoom);
    s << indent << "relative: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relative);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_PTZ_H

